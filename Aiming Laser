using System;
using System.Collections.Generic;
using spaar.ModLoader;
using TheGuysYouDespise;
using UnityEngine;

namespace Blocks
{
    public class LaserAimMod : BlockMod
    {
        public override Version Version { get { return new Version("2.0"); } }
        public override string Name { get { return "LaserAimMod"; } }
        public override string DisplayName { get { return "LaserAim Mod"; } }
        public override string BesiegeVersion { get { return "v0.11"; } }
        public override string Author { get { return "覅是"; } }
        protected Block laserAim = new Block()
                .ID(510)
                .TextureFile("LaserBlock.png")
                .BlockName("Aim Laser Emitter")
                .Obj(new List<Obj> { new Obj("LaserBlock.obj", new VisualOffset(Vector3.one, Vector3.zero, Vector3.zero)) })
                .Scripts(new Type[] { typeof(LaserAim) })
                .Properties(new BlockProperties().KeyBinding("Laser", "u").
                                                    ToggleModeEnabled("TOGGLE", false)
                                                 )
                .Mass(0.5f)
                .IconOffset(new Icon(1f, new Vector3(0f, 0f, 0f), new Vector3(-90f, 45f, 0f)))//第一个float是图标缩放，五六七是我找的比较好的角度
                .ShowCollider(false)
                .AddingPoints(new List<AddingPoint> { new BasePoint(true, true) })
                .CompoundCollider(new List<ColliderComposite> { new ColliderComposite(new Vector3(0.5f, 0.5f, 1.5f), new Vector3(0f, 0f, 0.7f), new Vector3(0f, 0f, 0f)) })
                .NeededResources(new List<NeededResource>{ new NeededResource(ResourceType.Audio, "laserHum.ogg") }//需要的资源，例如音乐

            );
        public override void OnLoad()
        {
            LoadFancyBlock(laserAim);//加载该模块
        }
        public override void OnUnload() { }
    }


    public class LaserAim : BlockScript
    {
        private bool LaserIt = false;
        private GameObject Line;
        public static GameObject currentAimingTarget;
        private static GameObject isThereAOBJ;
        public static Vector3 targetPoint;
        private static Vector3 currentEndingPoint;
        private RaycastHit hitt;
        private RaycastHit hitt2;
        private AudioSource Audio;
        private string key1;

        protected override void OnSimulateStart()
        {
            Line = new GameObject();
            Line.transform.parent = this.transform;
            Line.name = "Laser";
            Line.AddComponent<LineRenderer>();
            Line.renderer.material = new Material(Shader.Find("Particles/Additive"));
            Line.GetComponent<LineRenderer>().SetWidth(0.1f, 0.1f);
            Line.GetComponent<LineRenderer>().SetColors(Color.Lerp(Color.blue, Color.white, 0.5f), Color.Lerp(Color.blue, Color.black, 0.5f));

            key1 = this.GetComponent<MyBlockInfo>().key1;

            Audio = this.gameObject.AddComponent<AudioSource>();
            Audio.clip = new WWW("File:///" + Application.dataPath + "/Mods/Blocks/Resources/laserHum.ogg").audioClip;
            Audio.loop = false;
            Audio.volume = 200;
            targetPoint = Vector3.zero;
            currentEndingPoint = Vector3.zero;
            currentAimingTarget = null;
            
        }


        protected override void OnSimulateFixedUpdate()
        {
            if (AddPiece.isSimulating)
            {
                if (!this.GetComponent<MyBlockInfo>().toggleModeEnabled)
                {
                    if (Input.GetKeyDown(key1))
                    {
                        Line.GetComponent<LineRenderer>().SetVertexCount(2);
                        LaserIt = true;
                    }

                    if (Input.GetKeyUp(key1))
                    {
                        Line.GetComponent<LineRenderer>().SetVertexCount(0);
                        LaserIt = false;
                    }
                }
                else
                {
                    if (Input.GetKey(this.GetComponent<MyBlockInfo>().key1) && !LaserIt)
                    {
                        Line.GetComponent<LineRenderer>().SetVertexCount(2);
                        LaserIt = true;
                        
                    }
                    else if (Input.GetKey(this.GetComponent<MyBlockInfo>().key1) && LaserIt)
                    {
                        Line.GetComponent<LineRenderer>().SetVertexCount(2);
                        LaserIt = false;
                    }
                }

            }
            if (!AddPiece.isSimulating)
            {
                Line.GetComponent<LineRenderer>().SetVertexCount(0);
                LaserIt = false;
            }


            if (LaserIt)
            {
                Audio.Play();
                Line.GetComponent<LineRenderer>().SetPosition(0, this.transform.position + this.transform.forward * 1.5f);
                if (isThereAOBJ != null)
                {
                    Line.GetComponent<LineRenderer>().SetPosition(1, this.transform.position + this.transform.forward * Vector3.Distance(currentEndingPoint, this.transform.position));
                }
                else { Line.GetComponent<LineRenderer>().SetPosition(1, this.transform.position + this.transform.forward * 5000f); }
                //Line.GetComponent<LineRenderer> ();.SetPosition (2, this.transform.position+this.transform.forward*50);

                Ray ray = new Ray(this.transform.position, this.transform.forward);
                //Debug.Log(LaserIt);
                if (Physics.Raycast(ray, out hitt, Mathf.Infinity))
                {
                    //currentAimingTarget = hitt.point;
                    currentAimingTarget = hitt.transform.gameObject;
                    currentEndingPoint = hitt.point;
                    targetPoint = hitt.point;
                }
                Ray ray2 = new Ray(this.transform.position, this.transform.forward);
                //Debug.Log(LaserIt);
                if (Physics.Raycast(ray2, out hitt2, Mathf.Infinity))
                {
                    isThereAOBJ = hitt.transform.gameObject;
                }
            }
            else
            {
                Line.GetComponent<LineRenderer>().SetVertexCount(0);
                Audio.Stop();
            }
            //Physics stuff
           // Debug.Log(currentAimingTarget);
        }
        protected override void OnSimulateExit()
        {
            currentAimingTarget = null;
            //currentAimingTarget = Vector3.zero;
        }
    }


}





